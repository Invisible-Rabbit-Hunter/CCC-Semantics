import CCCSemantics.CCC

open CategoryTheory
instance : CCC (Type u) where
  one := PUnit
  bang _ := .unit
  bang_uniq := rfl

  prod Œ± Œ≤ := Œ± √ó Œ≤
  proj‚ÇÅ := Prod.fst
  proj‚ÇÇ := Prod.snd
  pair f g x := (f x, g x)
  proj‚ÇÅ_pair _ _ := rfl
  proj‚ÇÇ_pair _ _ := rfl
  pair_ext _ := rfl

  exp Œ± Œ≤ := Œ± ‚Üí Œ≤ 
  lam f x y := f (x, y)
  eval p := p.1 p.2
  lam_eval' _ := rfl
  lam_uniq' h := funext‚ÇÇ Œª a b => congrArg (¬∑ (a, b)) h

-- instance [Category ùíû] : CCC (ùíû ‚•§ Type u) where
--   one := { obj := Œª _ => PUnit, map := Œª _ => ùüô _  }
--   bang := { app := _ }
--   bang_uniq := rfl

--   prod Œ± Œ≤ := { obj := Œª x => Œ±.obj x √ó Œ≤.obj x
--                 map := Œª f => CCC.bimap (Œ±.map f) (Œ≤.map f)
--                 }
--   proj‚ÇÅ := { app := Œª _ => CCC.proj‚ÇÅ }
--   proj‚ÇÇ := { app := Œª _ => CCC.proj‚ÇÇ }
--   pair f g := { app := Œª x => CCC.pair (f.app x) (g.app x),
--                 naturality := by {
--                   intros X Y f‚ÇÇ
--                   simp
--                   trans

--                 }
--               }
--   proj‚ÇÅ_pair := _
--   proj‚ÇÇ_pair := _
--   pair_ext := _

--   exp := _ 
--   lam f := _
--   eval := _
--   lam_eval' := _
--   lam_uniq' := _
